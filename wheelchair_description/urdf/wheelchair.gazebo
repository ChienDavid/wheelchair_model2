<?xml version='1.0'?>
<robot>

  <gazebo reference="chair_back">
    <material>Gazebo/Red</material>
  </gazebo>

  <gazebo reference="back_button">
    <material>Gazebo/Red</material>
  </gazebo>

  <gazebo reference="pillar">
    <material>Gazebo/White</material>
  </gazebo>

  <gazebo reference="prop">
    <material>Gazebo/White</material>
  </gazebo>

  <gazebo reference="base">
    <material>Gazebo/White</material>
  </gazebo>

  <gazebo reference="chair_footrest">
    <material>Gazebo/Blue</material>
  </gazebo>

  <gazebo reference="front_button">
    <material>Gazebo/Blue</material>
  </gazebo>

  <gazebo reference="armrest_left_pillar_1">
    <material>Gazebo/White</material>
  </gazebo>

  <gazebo reference="armrest_left_pillar_2">
    <material>Gazebo/White</material>
  </gazebo>

  <gazebo reference="armrest_left_top">
    <material>Gazebo/White</material>
  </gazebo>

  <gazebo reference="armrest_right_pillar_1">
    <material>Gazebo/White</material>
  </gazebo>

  <gazebo reference="armrest_right_pillar_2">
    <material>Gazebo/White</material>
  </gazebo>

  <gazebo reference="armrest_right_top">
    <material>Gazebo/White</material>
  </gazebo>

  <gazebo reference="stick">
    <material>Gazebo/Black</material>
  </gazebo>

  <gazebo reference="caster_wheel1">
    <material>Gazebo/Black</material>
  </gazebo>

  <gazebo reference="caster_wheel2">
    <material>Gazebo/Black</material>
  </gazebo>

  <gazebo reference="base_scan">
    <material>Gazebo/Red</material>
  </gazebo>

  <gazebo reference="wheel_left">
    <mu1 value="1.0"/>
    <mu2 value="1.0"/>
    <kp value="10000000"/>
    <kd value="1.0"/>
    <material>Gazebo/Black</material>
  </gazebo>

  <gazebo reference="wheel_right">
    <mu1 value="1.0"/>
    <mu2 value="1.0"/>
    <kp value="10000000"/>
    <kd value="1.0"/>
    <material>Gazebo/Black</material>
  </gazebo>

  <gazebo reference="camera_link">
    <material>Gazebo/Black</material>
  </gazebo>

  <gazebo reference="imu_link">
    <sensor type="imu" name="imu">
      <always_on>true</always_on>
      <visualize>false</visualize>
    </sensor>
    <material>Gazebo/Grey</material>
  </gazebo>

  <gazebo>
    <plugin name="differential_drive_controller" filename="libgazebo_ros_diff_drive.so">
      <legacyMode>false</legacyMode>
      <alwaysOn>true</alwaysOn>
      <updateRate>20</updateRate>
      <leftJoint>wheel_JOINT_left</leftJoint>
      <rightJoint>wheel_JOINT_right</rightJoint>
      <wheelSeparation>0.48</wheelSeparation>
      <wheelDiameter>0.28</wheelDiameter>
      <torque>100</torque>
      <commandTopic>cmd_vel</commandTopic>
      <odometryTopic>odom</odometryTopic>
      <odometryFrame>odom</odometryFrame>
      <robotBaseFrame>base_footprint</robotBaseFrame>
      <publishWheelJointState>true</publishWheelJointState>
      <publishTf>true</publishTf>
      <wheelAcceleration>1</wheelAcceleration>
      <wheelTorque>100</wheelTorque>
      <rosDebugLevel>na</rosDebugLevel>
      <odometrySource>world</odometrySource>
      <publishOdomTF>true</publishOdomTF>
      <publishWheelTF>false</publishWheelTF>
    </plugin>
  </gazebo>

  <gazebo>
    <plugin name="gazebo_ros_control" filename="libgazebo_ros_control.so">
      <robotNamespace>/wheelchair_model</robotNamespace>
      <robotSimType>gazebo_ros_control/DefaultRobotHWSim</robotSimType>
      <legacyModeNS>true</legacyModeNS>
    </plugin>
  </gazebo>

  <gazebo>
    <plugin name="imu_plugin" filename="libgazebo_ros_imu.so">
      <alwaysOn>true</alwaysOn>
      <bodyName>imu_link</bodyName>
      <frameName>imu_link</frameName>
      <topicName>imu</topicName>
      <serviceName>imu_service</serviceName>
      <gaussianNoise>0.0</gaussianNoise>
      <updateRate>200</updateRate>
      <imu>
        <noise>
          <type>gaussian</type>
          <rate>
            <mean>0.0</mean>
            <stddev>2e-4</stddev>
            <bias_mean>0.0000075</bias_mean>
            <bias_stddev>0.0000008</bias_stddev>
          </rate>
          <accel>
            <mean>0.0</mean>
            <stddev>1.7e-2</stddev>
            <bias_mean>0.1</bias_mean>
            <bias_stddev>0.001</bias_stddev>
          </accel>
        </noise>
      </imu>
    </plugin>
  </gazebo>

<gazebo reference="base_scan">
    <sensor type="ray" name="head_hokuyo_sensor1">
      <pose>0 0 0 0 0 0</pose>
      <visualize>false</visualize>
      <update_rate>40</update_rate>
      <ray>
        <scan>
          <horizontal>
            <samples>720</samples>
            <resolution>1</resolution>
            <min_angle>-1.570796</min_angle>
            <max_angle>1.570796</max_angle>
          </horizontal>
        </scan>
        <range>
          <min>0.10</min>
          <max>30.0</max>
          <resolution>0.01</resolution>
        </range>
        <noise>
          <type>gaussian</type>
          <!-- Noise parameters based on published spec for Hokuyo laser
               achieving "+-30mm" accuracy at range < 10m.  A mean of 0.0m and
               stddev of 0.01m will put 99.7% of samples within 0.03m of the true
               reading. -->
          <mean>0.0</mean>
          <stddev>0.01</stddev>
        </noise>
      </ray>
      <plugin name="gazebo_ros_head_hokuyo_controller" filename="libgazebo_ros_laser.so">
        <topicName>/laser/scan</topicName>
        <frameName>base_scan</frameName>
      </plugin>
    </sensor>
</gazebo>

<gazebo reference="top_scan">
    <sensor type="ray" name="head_hokuyo_sensor2">
      <pose>0 0 0 0 0 0</pose>
      <visualize>false</visualize>
      <update_rate>40</update_rate>
      <ray>
        <scan>
          <horizontal>
            <samples>720</samples>
            <resolution>1</resolution>
            <min_angle>-1.570796</min_angle>
            <max_angle>1.570796</max_angle>
          </horizontal>
        </scan>
        <range>
          <min>0.10</min>
          <max>30.0</max>
          <resolution>0.01</resolution>
        </range>
        <noise>
          <type>gaussian</type>
          <!-- Noise parameters based on published spec for Hokuyo laser
               achieving "+-30mm" accuracy at range < 10m.  A mean of 0.0m and
               stddev of 0.01m will put 99.7% of samples within 0.03m of the true
               reading. -->
          <mean>0.0</mean>
          <stddev>0.01</stddev>
        </noise>
      </ray>
      <plugin name="gazebo_ros_head_hokuyo_controller" filename="libgazebo_ros_laser.so">
        <topicName>/laser/topscan</topicName>
        <frameName>top_scan</frameName>
      </plugin>
    </sensor>
</gazebo>


  <!-- camera -->
  <gazebo reference="camera_link">
    <sensor type="camera" name="camera">
      <update_rate>30.0</update_rate>
      <camera name="head">
        <horizontal_fov>1.3962634</horizontal_fov>
        <image>
          <width>1920</width>
          <height>1080</height>
          <format>R8G8B8</format>
        </image>
        <clip>
          <near>0.03</near>
          <far>300</far>
        </clip>
        <noise>
          <type>gaussian</type>
          <!-- Noise is sampled independently per pixel on each frame.
               That pixel's noise value is added to each of its color
               channels, which at that point lie in the range [0,1]. -->
          <mean>0.0</mean>
          <stddev>0.007</stddev>
        </noise>
      </camera>
      <plugin name="camera_controller" filename="libgazebo_ros_camera.so">
        <alwaysOn>true</alwaysOn>
        <updateRate>30.0</updateRate>
        <cameraName>/wheelchair_model/camera</cameraName>
        <imageTopicName>image_raw</imageTopicName>
        <cameraInfoTopicName>camera_info</cameraInfoTopicName>
        <frameName>camera_link</frameName>
        <hackBaseline>0.07</hackBaseline>
        <distortionK1>0.0</distortionK1>
        <distortionK2>0.0</distortionK2>
        <distortionK3>0.0</distortionK3>
        <distortionT1>0.0</distortionT1>
        <distortionT2>0.0</distortionT2>
      </plugin>
    </sensor>
  </gazebo>

</robot>
